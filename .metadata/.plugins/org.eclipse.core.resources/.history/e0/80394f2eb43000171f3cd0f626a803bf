import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import org.jgap.InvalidConfigurationException;
import org.jgap.gp.impl.*;
import org.jgap.gp.*;

public class Main {

	public static Float[][] readTable(String tableFileName) throws FileNotFoundException{
		
		File tableFile = new File(tableFileName);
		Scanner sc = new Scanner(tableFile);
		sc.nextLine();
		sc.nextLine();
		List<Float> xFromFile = new ArrayList<Float>();
		List<Float> yFromFile = new ArrayList<Float>();
		while(sc.hasNext()){
			xFromFile.add(sc.nextFloat());
			yFromFile.add(sc.nextFloat());
			sc.nextLine();
		}
		sc.close();
		return new Float[][]{
				xFromFile.toArray(new Float[xFromFile.size()]),
				yFromFile.toArray(new Float[yFromFile.size()]),
		};
	}

	public static void main(String[] args) throws InvalidConfigurationException, FileNotFoundException {
		GPConfiguration config = new GPConfiguration();

		// We use a delta fitness evaluator because we compute a defect rate,
		// not
		// a point score!
		// ----------------------------------------------------------------------
		config.setGPFitnessEvaluator(new DeltaGPFitnessEvaluator());
		config.setMaxInitDepth(6);
		config.setPopulationSize(100);
		Float[][] xAndY = readTable(args[0]);
		config.setFitnessFunction(new RegressionFitnessFunction(xAndY[0], xAndY[1]));
		
	}
	
	public static GPGenotype create(GPConfiguration a_conf) throws InvalidConfigurationException {
		  Class[] types = {
		    CommandGene.FloatClass};
		  Class[][] argTypes = {
		    {}
		  };
		  // Define the commands and terminals the GP is allowed to use.
		  // -----------------------------------------------------------
		  CommandGene[][] nodeSets = {
		    {
		    vx = Variable.create(a_conf, "X", CommandGene.FloatClass),
		    new AddCommand(a_conf, CommandGene.FloatClass),
		    new SubtractCommand(a_conf, CommandGene.FloatClass),
		    new MultiplyCommand(a_conf, CommandGene.FloatClass),
		    new DivideCommand(a_conf, CommandGene.FloatClass),
		    new SinCommand(a_conf, CommandGene.FloatClass),
		    new CosCommand(a_conf, CommandGene.FloatClass),
		    new ExpCommand(a_conf, CommandGene.FloatClass),
		    // Use terminal with possible value from 2.0 to 10.0 decimal
		    new Terminal(conf, CommandGene.FloatClass, 2.0d, 10.0d, false),
		    }
		  };
		  Random random = new Random();
		  // Randomly initialize function data (X-Y table) for x^4+x^3+x^2+x.
		  // This is problem-specific and not necessary in other cases.
		  // ----------------------------------------------------------------
		  for (int i = 0; i < 20; i++) {
		    float f = 2.0f * (random.nextFloat() - 0.5f);
		    x[i] = new Float(f);
		    y[i] = f * f * f * f + f * f * f + f * f - f;
		    System.out.println(i + ") " + x[i] + " " + y[i]);
		  }
		  // Create genotype with initial population.
		  // Allow max. 100 nodes within one program.
		  // ----------------------------------------
		  return randomInitialGenotype(a_conf, types, argTypes, nodeSets, 100, true);
		}

}
